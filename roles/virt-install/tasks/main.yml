# In a first 'quick' version 'virt-install' will be used to install debian variants via preseed and custom scripts..

- name: 'Test variables'
  fail:
    msg: 'Some mandatory variable was missing..'
  when: new.domainname is not defined or new.default_password is not defined or new.net is not defined

- name: 'Check that the new host really is defined as virtual'
  fail:
    msg: '{{ new__hostname }} is not defined as virtual in new.type'
  when: new.type != 'vm'

- name: prepare logical volume storage
  become: true
  lvol:
    lv: '{{ new__hostname }}-{{ item.name }}'
    size: '{{ item.size | d( host.virt.storage[item.meta.pool].default_size ) }}'
    vg: '{{ host.virt.storage[item.meta.pool].pool }}'
  with_items: '{{ new.disk }}'
  when: host.virt.storage[item.meta.pool].type == "lvm"

- name: prepare qemu image file storage
  become: true
  shell: 'qemu-img create -f {{ host.virt.storage[item.meta.pool].format }} {{ host.virt.storage[item.meta.pool].path }}/{{ new__hostname }}-{{ item.name }} {{ item.size | d( host.virt.storage[item.meta.pool].default_size ) }}'
  with_items: '{{ new.disk }}'
  when: host.virt.storage[item.meta.pool].type == "qemu-image"

- name: 'Check if a virtual machine with the same name is already defined'
  stat:
    path: '/etc/libvirt/qemu/{{ new__hostname }}.xml'
  register: vm_def

#- name: 'Check if a virtual machine with the same name already exists'
#  virt:
#    command: list_vms
#  register: result

#- name: "foo"
#  debug:
#    var: result

- name: 'Prepare the (temp.?) working directory hierarchy'
  file:
    path: '{{ os__tmp_image_dir }}'
    state: directory
    mode: '0755'

- name: 'Download the netinstaller files'
  environment:
    http_proxy: '{{ http_proxy }}'
  get_url:
    url: '{{ item.url }}'
    dest: '{{ item.dest }}'
    checksum: '{{ item.checksum }}'
  with_items: '{{ os__installer_files[new.arch] }}'

- name: 'Install the preseed template'
  template:
    src: '{{ item.src }}'
    dest: '{{ item.dest }}'
    mode: '{{ item.mode }}'
  with_items: '{{ os__installer_templates }}'

- name: 'Create a virtual machine'
  shell: 'virt-install --quiet --connect {{ host.virt.connect }} --autostart --noautoconsole --console pty,target_type=serial --virt-type {{ host.virt.type }} --name {{ new__hostname }} --vcpus {{ new.cpu.cores }} --ram {{ new.mem.size }} --disk {{ new__system_disk_attr.target }},bus={{ new__system_disk.bus }},cache={{ new__system_disk.cache }} --network {{ host.virt.network }} --os-type {{ new.os.distro }} --os-variant {{ new.os.variant }} --video {{ host.virt.display.video }} --graphics {{ host.virt.display.graphics }} --location {{ os__tmp_installer_dir }} --initrd-inject={{ os__installer_template_list | join(" --initrd-inject=") }} --extra-args "{{ host.virt.install_console }} auto=true file=/preseed.cfg hostname={{ new__hostname }} domain={{ new.domainname }} interface=auto netcfg/get_ipaddress={{ new__system_net.ip }} netcfg/get_netmask={{ new__system_net.netmask }} netcfg/get_gateway={{ new__system_net.gateway }} netcfg/get_nameservers={{ new__system_net.nameserver }} netcfg/confirm_static=true netcfg/disable_dhcp=true"'
  when: ( vm_def.stat.isreg is not defined )

